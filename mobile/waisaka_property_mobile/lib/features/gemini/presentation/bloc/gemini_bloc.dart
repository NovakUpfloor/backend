import 'dart:convert'; import 'package:flutter_bloc/flutter_bloc.dart'; import 'package:flutter/material.dart'; import 'package:waisaka_property_mobile/features/gemini/data/repositories/gemini_repository.dart'; part 'gemini_event.dart'; part 'gemini_state.dart'; class GeminiBloc extends Bloc<GeminiEvent, GeminiState> { final GeminiRepository _repository; GeminiBloc({required GeminiRepository repository}) : _repository = repository, super(GeminiInitial()) { on<SendCommandToGemini>(_onSendCommand); } Future<void> _onSendCommand(SendCommandToGemini event, Emitter<GeminiState> emit) async { emit(GeminiLoading()); try { final responseString = await _repository.sendCommand(event.textCommand, event.pageContext); final action = jsonDecode(responseString) as Map<String, dynamic>; emit(GeminiActionSuccess(action: action)); } catch (e) { emit(GeminiFailure(error: e.toString())); } } }
