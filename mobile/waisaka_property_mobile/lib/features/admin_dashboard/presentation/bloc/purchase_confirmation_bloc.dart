import 'package:flutter_bloc/flutter_bloc.dart'; import 'package:flutter/material.dart'; import 'package:waisaka_property_mobile/features/admin_dashboard/data/repositories/admin_repository.dart'; import 'package:waisaka_property_mobile/features/user_dashboard/data/models/purchase_history.dart'; part 'purchase_confirmation_event.dart'; part 'purchase_confirmation_state.dart'; class PurchaseConfirmationBloc extends Bloc<PurchaseConfirmationEvent, PurchaseConfirmationState> { final AdminRepository _repository; PurchaseConfirmationBloc({required AdminRepository repository}) : _repository = repository, super(PurchaseConfirmationInitial()) { on<FetchConfirmations>(_onFetch); on<UpdateConfirmationStatus>(_onUpdate); } Future<void> _onFetch(FetchConfirmations event, Emitter<PurchaseConfirmationState> emit) async { emit(PurchaseConfirmationLoading()); try { final c = await _repository.fetchPurchaseConfirmations(); emit(PurchaseConfirmationLoadSuccess(confirmations: c)); } catch (e) { emit(PurchaseConfirmationLoadFailure(error: e.toString())); } } Future<void> _onUpdate(UpdateConfirmationStatus event, Emitter<PurchaseConfirmationState> emit) async { emit(PurchaseConfirmationUpdateInProgress()); try { await _repository.updatePurchaseStatus(event.transactionId, event.status); emit(PurchaseConfirmationUpdateSuccess()); add(FetchConfirmations()); } catch (e) { emit(PurchaseConfirmationUpdateFailure(error: e.toString())); } } }
